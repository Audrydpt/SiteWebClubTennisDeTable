// Charger les dépendances via importScripts
importScripts(
  'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js'
);
importScripts(
  'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js'
);

console.log('PDF Worker initialized');

self.onmessage = function (e) {
  try {
    console.log('Worker received data for PDF generation');
    const { data, filename, logo } = e.data;

    if (!data || !data.length) {
      throw new Error('No data provided for PDF generation');
    }

    const { jsPDF } = self.jspdf;
    const doc = new jsPDF();
    const primaryColor = [57, 147, 158];
    const secondaryColor = [240, 240, 240];
    const accentColor = [51, 51, 51];
    if (logo) {
      try {
        doc.addImage(logo, 'PNG', 14, 10, 30, 12);
      } catch (logoError) {
        console.error('Error adding logo:', logoError);
      }
    }

    doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 3, 'F');

    doc.setFontSize(16);
    doc.setTextColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.text(`Export: ${filename}`, logo ? 50 : 14, 15);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Generated on: ${new Date().toLocaleString()}`,
      logo ? 50 : 14,
      22
    );

    doc.setDrawColor(200, 200, 200);
    doc.line(14, 25, doc.internal.pageSize.getWidth() - 14, 25);

    const filteredData = data.filter((item) => item.count != null);

    if (!filteredData.length) {
      throw new Error('No valid data available for PDF generation');
    }

    const headers = Object.keys(filteredData[0]);
    const rows = filteredData.map((item) => Object.values(item));

    doc.autoTable({
      head: [headers],
      body: rows,
      startY: 30,
      styles: {
        fontSize: 8,
        cellPadding: 3,
        halign: 'center',
        valign: 'middle',
      },
      headStyles: {
        fillColor: primaryColor,
        textColor: 255,
        fontStyle: 'bold',
        halign: 'center',
      },
      alternateRowStyles: {
        fillColor: secondaryColor,
      },
      tableLineColor: [200, 200, 200],
      tableLineWidth: 0.1,
      columnStyles: {},
      didDrawPage: function (data) {
        const pageCount = doc.internal.getNumberOfPages();
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text(
          `Page ${data.pageNumber} of ${pageCount}`,
          data.settings.margin.left,
          doc.internal.pageSize.getHeight() - 10
        );
        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(
          `© ${new Date().getFullYear()} - Document generated by ACIC by CHAPSVISION`,
          doc.internal.pageSize.getWidth() / 2,
          doc.internal.pageSize.getHeight() - 10,
          { align: 'center' }
        );
      },
    });

    const pdfData = doc.output('arraybuffer');
    console.log('PDF generation completed');

    self.postMessage(
      {
        status: 'success',
        message: 'PDF generated successfully',
        data: pdfData,
        filename: `${filename}.pdf`,
      },
      [pdfData]
    );
  } catch (error) {
    console.error('Error generating PDF:', error);
    self.postMessage({
      status: 'error',
      message: error.message || 'Failed to generate PDF',
    });
  }
};
