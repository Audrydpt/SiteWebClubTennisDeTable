/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable new-cap */
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

declare const self: DedicatedWorkerGlobalScope;

export interface PdfWorkerRequest {
  data: Array<Record<string, any>>;
  filename: string;
  logo?: string | null;
}

export interface PdfWorkerResponseSuccess {
  status: 'success';
  message: string;
  data: ArrayBuffer;
  filename: string;
}

export interface PdfWorkerResponseError {
  status: 'error';
  message: string;
}

export type PdfWorkerResponse =
  | PdfWorkerResponseSuccess
  | PdfWorkerResponseError;

async function getLogoAsBase64() {
  try {
    const logoUrl = new URL('/src/assets/logoACIC.png', import.meta.url).href;
    const response = await fetch(logoUrl);

    if (!response.ok) {
      return null;
    }

    const blob = await response.blob();

    return await new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch {
    return null;
  }
}

self.onmessage = async (e: MessageEvent<PdfWorkerRequest>): Promise<void> => {
  try {
    const { data, filename } = e.data;
    const logo = await getLogoAsBase64();

    if (!data || data.length === 0) {
      throw new Error('No data provided for PDF generation');
    }

    const doc = new jsPDF();

    // Configuration des couleurs
    const primaryColor: [number, number, number] = [57, 147, 158];
    const secondaryColor: [number, number, number] = [240, 240, 240];
    const accentColor: [number, number, number] = [51, 51, 51];

    // Ajout du logo si fourni
    try {
      doc.addImage(logo, 'PNG', 14, 10, 30, 12);
    } catch {
      // En cas d'erreur, on continue sans logo
    }

    // En-tête du PDF
    doc.setFillColor(...primaryColor);
    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 3, 'F');

    doc.setFontSize(16);
    doc.setTextColor(...accentColor);
    doc.text(`Export: ${filename}`, logo ? 50 : 14, 15);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Generated on: ${new Date().toLocaleString()}`,
      logo ? 50 : 14,
      22
    );

    doc.setDrawColor(200, 200, 200);
    doc.line(14, 25, doc.internal.pageSize.getWidth() - 14, 25);

    // Préparation et filtrage des données pour générer le tableau
    const filteredData = data.filter((item) => item.count != null);

    if (filteredData.length === 0) {
      throw new Error('No valid data available for PDF generation');
    }

    const headers = Object.keys(filteredData[0]);
    const rows = filteredData.map((item) => Object.values(item));

    // Génération du tableau via autoTable
    autoTable(doc, {
      head: [headers],
      body: rows,
      startY: 30,
      styles: {
        fontSize: 8,
        cellPadding: 3,
        halign: 'center',
        valign: 'middle',
      },
      headStyles: {
        fillColor: primaryColor,
        textColor: 255,
        fontStyle: 'bold',
        halign: 'center',
      },
      alternateRowStyles: {
        fillColor: secondaryColor,
      },
      tableLineColor: [200, 200, 200],
      tableLineWidth: 0.1,
      didDrawPage: (tableData) => {
        const pageCount = doc.internal.pages.length;
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text(
          `Page ${tableData.pageNumber} of ${pageCount}`,
          tableData.settings.margin.left,
          doc.internal.pageSize.getHeight() - 10
        );

        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(
          `© ${new Date().getFullYear()} - Document generated by ACIC by CHAPSVISION`,
          doc.internal.pageSize.getWidth() / 2,
          doc.internal.pageSize.getHeight() - 10,
          { align: 'center' }
        );
      },
    });

    const pdfData = doc.output('arraybuffer');

    const response: PdfWorkerResponseSuccess = {
      status: 'success',
      message: 'PDF generated successfully',
      data: pdfData,
      filename: `${filename}.pdf`,
    };

    // Transfert avec transfert de propriété du buffer
    self.postMessage(response, [pdfData]);
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : 'Failed to generate PDF';

    const response: PdfWorkerResponseError = {
      status: 'error',
      message: errorMessage,
    };

    self.postMessage(response);
  }
};

export {};
